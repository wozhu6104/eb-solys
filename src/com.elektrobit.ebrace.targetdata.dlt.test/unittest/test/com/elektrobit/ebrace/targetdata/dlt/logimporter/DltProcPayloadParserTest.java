/*******************************************************************************
 * Copyright (C) 2018 Elektrobit Automotive GmbH
 * 
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 ******************************************************************************/
package test.com.elektrobit.ebrace.targetdata.dlt.logimporter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Map;

import org.junit.Test;
import org.mockito.Mockito;

import com.elektrobit.ebrace.common.utils.HexStringHelper;
import com.elektrobit.ebrace.targetdata.dlt.internal.BytesFromStreamReaderImpl;
import com.elektrobit.ebrace.targetdata.dlt.internal.DltMessage;
import com.elektrobit.ebrace.targetdata.dlt.internal.DltMessageWithStorageHeaderParser;
import com.elektrobit.ebrace.targetdata.dlt.internal.connection.DltChannelFromLogInfoCreator;
import com.elektrobit.ebrace.targetdata.dlt.internal.procfsparser.DltProcPayloadParser;
import com.elektrobit.ebrace.targetdata.dlt.internal.procfsparser.Measurement;
import com.elektrobit.ebrace.targetdata.dlt.internal.procfsparser.ProcCpuEntry;
import com.elektrobit.ebrace.targetdata.dlt.internal.procfsparser.ProcMemEntry;

public class DltProcPayloadParserTest
{
    private DltMessage parseDltMessage(String hexString) throws Exception
    {
        byte[] decimalsString = HexStringHelper.hexStringToByteArray( hexString );
        InputStream stream = new ByteArrayInputStream( decimalsString );
        DltMessageWithStorageHeaderParser dltMessageParser = new DltMessageWithStorageHeaderParser( Mockito
                .mock( DltChannelFromLogInfoCreator.class ) );
        BytesFromStreamReaderImpl readerImpl = new BytesFromStreamReaderImpl( stream );
        return dltMessageParser.readNextMessage( readerImpl );
    }

    @Test
    public void statListsTests() throws Exception
    {

        DltProcPayloadParser procParser = new DltProcPayloadParser();
        /*
         * DLT]Xj7 EEvA=Â»9EEvA Å¢ â€°Ë˜ASYS PROC#    stat  1 (systemd) S 0 1 1 0 -1 4194560 4418 15855 64
         * 22 11 52 4 82 20 0 1 0 4 4902912 797 4294967295 32768 906168 2125610720 2125609068 1994355084 0 671173123
         * 4096 1260 2148868212 0 0 17 0 0 0 42 0 0 941384 991388 995328 2125610908 2125610957 2125610957 2125610983 0
         */
        DltMessage firstMessage = parseDltMessage( "00444C54015D040E586A370B00454576413DBB013945457641000000DE000189A241035359530050524F432300000001000000000200000500737461740000020000060131202873797374656D642920532030203120312030202D3120343139343536302034343138203135383535203634203232203131203532203420383220323020302031203020342034393032393132203739372034323934393637323935203332373638203930363136382032313235363130373230203231323536303930363820313939343335353038342030203637313137333132332034303936203132363020323134383836383231322030203020313720302030203020343220302030203934313338342039393133383820393935333238203231323536313039303820323132353631" );

        /*
         * DLT_XWÂ¨ EEvA=(;EEvA Å¢ `ASYS PROC#    stat  1 (systemd) S 0 1 1 0 -1 4194560 8120 38040 64 59
         * 38 93 22 119 20 0 1 0 4 6098944 846 4294967295 32768 906168 2125610720 2125609068 1994355084 0 671173123 4096
         * 1260 2148868212 0 0 17 0 0 0 48 0 0 941384 991388 995328 2125610908 2125610957 2125610957 2125610983 0
         * DLT_XWÂ¨ EEvA=) ÄŒEEvA Å¢ aASYS PROC#    stat  â€¢ 2 (kthreadd) S 0 0 0 0 -1 2129984 0 0 0 0 0 0 0
         * 0 20 0 1 0 4 0 0 4294967295 0 0 0 0 0 0 0 2147483647 0 2147862764 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         */
        DltMessage secondMessage = parseDltMessage( "444C54015F040E5857A80400454576413D28013B45457641000000DE0004046041035359530050524F432300000001000000000200000500737461740000020000080131202873797374656D642920532030203120312030202D312034313934353630203831323020333830343020363420353920333820393320323220313139203230203020312030203420363039383934342038343620343239343936373239352033323736382039303631363820323132353631303732302032313235363039303638203139393433353530383420302036373131373331323320343039362031323630203231343838363832313220302030203137203020302030203438203020302039343133383420393931333838203939353332382032313235363130393038203231323536" );

        /*
         * DLTbXÂµ EEvA=ÅŸ<EEvA Å¢ %ASYS PROC#    stat  1 (systemd) S 0 1 1 0 -1 4194560 8205 38283 64 59 39
         * 101 22 119 20 0 1 0 4 6098944 846 4294967295 32768 906168 2125610720 2125609068 1994355084 0 671173123 4096
         * 1260 2148868212 0 0 17 0 0 0 48 0 0 941384 991388 995328 2125610908 2125610957 2125610957 2125610983 0
         */
        DltMessage thirdMessage = parseDltMessage( "444C540162040E58B50D0000454576413DBA013C45457641000000DE0006072541035359530050524F432300000001000000000200000500737461740000020000090131202873797374656D642920532030203120312030202D312034313934353630203832303520333832383320363420353920333920313031203232203131392032302030203120302034203630393839343420383436203432393439363732393520333237363820393036313638203231323536313037323020323132353630393036382031393934333535303834203020363731313733313233203430393620313236302032313438383638323132203020302031372030203020302034382030203020393431333834203939313338382039393533323820323132353631303930382032313235" );

        Measurement<ProcCpuEntry> cpuResults = null;
        cpuResults = procParser.parseCpuData( firstMessage );

        cpuResults = procParser.parseCpuData( secondMessage );

        cpuResults = procParser.parseCpuData( thirdMessage );

        for (Map.Entry<Integer, ProcCpuEntry> entry : cpuResults.getPidToMeasurement().entrySet())
        {
            assertEquals( new Integer( 1 ), entry.getKey() );
            assertEquals( 1230, entry.getValue().getCpuUsage() );
            assertEquals( "systemd", entry.getValue().getProcName() );
            break;
        }

        assertNotNull( cpuResults );
    }

    @Test
    public void statZeroTimeDiffTests() throws Exception
    {

        DltProcPayloadParser procParser = new DltProcPayloadParser();

        DltMessage firstMessage = parseDltMessage( "00444C54015D040E586A370B00454576413DBB013945457641000000DE000189A241035359530050524F432300000001000000000200000500737461740000020000060131202873797374656D642920532030203120312030202D3120343139343536302034343138203135383535203634203232203131203532203420383220323020302031203020342034393032393132203739372034323934393637323935203332373638203930363136382032313235363130373230203231323536303930363820313939343335353038342030203637313137333132332034303936203132363020323134383836383231322030203020313720302030203020343220302030203934313338342039393133383820393935333238203231323536313039303820323132353631" );
        Measurement<ProcCpuEntry> cpuResults = null;
        cpuResults = procParser.parseCpuData( firstMessage );
        cpuResults = procParser.parseCpuData( firstMessage );
        cpuResults = procParser.parseCpuData( firstMessage );

        assertEquals( 0, cpuResults.getPidToMeasurement().size() );
    }

    @Test
    public void statmListsTests() throws Exception
    {

        DltProcPayloadParser procParser = new DltProcPayloadParser();
        Measurement<ProcMemEntry> memResults = null;

        DltMessage firstMessage = parseDltMessage
        procParser.parseMemData( firstMessage );

        DltMessage secondMessage = parseDltMessage
        procParser.parseMemData( secondMessage );

        DltMessage thirdMessage = parseDltMessage
        memResults = procParser.parseMemData( thirdMessage );

        assertNotNull( memResults );
    }

    @Test
    public void statmRssUsageTests() throws Exception
    {

        DltProcPayloadParser procParser = new DltProcPayloadParser();
        Measurement<ProcMemEntry> memResults = null;

        DltMessage firstMessage = parseDltMessage
        memResults = procParser.parseMemData( firstMessage );
        memResults = procParser.parseMemData( firstMessage );

        assertEquals( 1489, memResults.getPidToMeasurement().entrySet().iterator().next().getValue().getMemoryUsage() );
    }

}
