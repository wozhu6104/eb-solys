// Generated by delombok at Sat Nov 17 09:58:44 CET 2018
/*******************************************************************************
 * Copyright (C) 2018 Elektrobit Automotive GmbH
 * 
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 ******************************************************************************/
package com.elektrobit.ebrace.ui.ecl.browser;

import java.net.MalformedURLException;
import java.net.URL;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorSite;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.part.EditorPart;

import com.elektrobit.ebrace.core.interactor.api.browsercontent.HtmlViewChangedCallback;
import com.elektrobit.ebrace.core.interactor.api.browsercontent.HtmlViewNotifyUseCase;
import com.elektrobit.ebrace.core.interactor.api.common.UseCaseFactoryInstance;
import com.elektrobit.ebrace.core.interactor.api.resources.model.htmlview.HtmlViewModel;
import com.elektrobit.ebrace.core.interactor.api.resources.tree.ModelNameNotifyCallback;
import com.elektrobit.ebrace.core.interactor.api.resources.tree.ModelNameNotifyUseCase;
import com.elektrobit.ebrace.viewer.resources.editor.ResourcesModelEditorInput;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.concurrent.Worker.State;
import javafx.embed.swt.FXCanvas;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import lombok.extern.log4j.Log4j;
import netscape.javascript.JSObject;

@Log4j
public class BrowserEditor extends EditorPart implements HtmlViewChangedCallback, ModelNameNotifyCallback
{
    private static WebView webView;
    public static final String PLUGIN_ID = "com.elektrobit.ebrace.ui.ecl.browser";
    private ResourcesModelEditorInput editorInput;
    private HtmlViewModel model;
    private HtmlViewNotifyUseCase htmlNotifyUseCase;
    private ModelNameNotifyUseCase modelNameNotifyUseCase;
    private FXCanvas browserCanvas;
    private CallScriptJSBridge scriptJSBridge;
    private SelectTimeMarkerJSBridge jumpToTimeMarkerFunction;

    @Override
    public void doSave(IProgressMonitor monitor)
    {
    }

    @Override
    public void doSaveAs()
    {
    }

    @Override
    public void init(IEditorSite site, IEditorInput input) throws PartInitException
    {
        setSite( site );
        editorInput = (ResourcesModelEditorInput)input;
        setInput( editorInput );
        model = (HtmlViewModel)editorInput.getModel();
    }

    @Override
    public boolean isDirty()
    {
        return false;
    }

    @Override
    public boolean isSaveAsAllowed()
    {
        return false;
    }

    @Override
    public String getTitle()
    {
        if (editorInput != null)
        {
            return editorInput.getModel().getName();
        }
        return super.getTitle();
    }

    @Override
    public void createPartControl(Composite parent)
    {
        htmlNotifyUseCase = UseCaseFactoryInstance.get().makeHtmlViewNotifyUseCase( this );
        htmlNotifyUseCase.register( model );
        modelNameNotifyUseCase = UseCaseFactoryInstance.get().makeModelNameNotifyUseCase( this );
        modelNameNotifyUseCase.register( editorInput.getModel() );
        browserCanvas = new FXCanvas( parent, SWT.NONE );
        browserCanvas.setScene( createScene() );
        scriptJSBridge = new CallScriptJSBridge();
        jumpToTimeMarkerFunction = new SelectTimeMarkerJSBridge();
        webView.getEngine().setJavaScriptEnabled( true );
        webView.setContextMenuEnabled( true );
        webView.getEngine().getLoadWorker().stateProperty().addListener( (obs, old, neww) -> {
            if (neww == Worker.State.SUCCEEDED)
            {
                JSObject window = (JSObject)webView.getEngine().executeScript( "window" );
                window.setMember( "solysScript", scriptJSBridge );
                window.setMember( "solysMarker", jumpToTimeMarkerFunction );
            }
        } );

        webView.getEngine().load( model.getURL() );
    }

    private static Scene createScene()
    {
        BorderPane borderPane = new BorderPane();
        Scene scene = new Scene( borderPane );
        webView = new WebView();
        borderPane.setCenter( webView );
        return scene;
    }

    private void updateURI(String htmlPageUrl)
    {
        try
        {
            URL url = new URL( htmlPageUrl );
            webView.getEngine().load( url.toExternalForm() );
        }
        catch (MalformedURLException e)
        {
            log.warn( "Couldn't find browser url!", e );
        }
    }

    @Override
    public void setFocus()
    {
    }

    @Override
    public void dispose()
    {
        htmlNotifyUseCase.unregister();
        modelNameNotifyUseCase.unregister();
        super.dispose();
    }

    @Override
    public void onContentChanged()
    {
        updateURI( model.getURL() );
    }

    @Override
    public void onNewResourceName(String newName)
    {
        firePropertyChange( PROP_TITLE );
    }

    @Override
    public void onResourceDeleted()
    {
        getSite().getPage().closeEditor( this, false );
    }

    @Override
    public void onJavaScriptFunctionRequested(String function, String arg)
    {
        String call = function + "(" + arg + ");";

        final WebEngine engine = webView.getEngine();
        engine.getLoadWorker().stateProperty().addListener( new ChangeListener<State>()
        {
            @Override
            public void changed(ObservableValue ov, State oldState, State newState)
            {
                if (newState == State.SUCCEEDED)
                {
                    engine.executeScript( call );
                }
            }
        } );
    }
}
